import cv2
import pathlib
import itertools
import filetype

import tensorflow as tf 
import numpy as np
import pandas as pd

from typing import List

# scripts
from data_classes import *
from decorators import * 
from config import *
from data_io import * 
from image_operations import * 
from augment import * 





class Utils(ConfigReader, DataIO, ImageOperations):

    
    def __init__(self, config_path="./camvas.config", config=None):
        
        super().__init__()
        
        self.config = config if config else self.read_config(
            config_path
        )


    def threshold_prediction(self, prediction):

        prediction = self.binary_threshold(
            prediction,
            self.config["deeplab"]["threshold"]
        )
        
        prediction = self.to_range_0_255(prediction)
 
        return prediction
    

        

    def process(self, data_point, image_only = False, mask_only = False):
        image = self.read_image_or_mask(
            data_point.image.path,
            resize_dims = (512,512)
        )
        image = self._change_fundus_background_color(image)
        image = self._apply_clahe(image)
        image = image * (1 / 255.)

        mask = self.read_image_or_mask(
            data_point.mask.path,
            resize_dims = (512,512),
            as_grayscale = True
        )
        mask = mask * (1 / 255.)

        if image_only == True:
            return image
        elif mask_only == True:
            return mask 
        else:
            return  image, mask




        

    @check_output_dir
    def write_prediction_result(
            self,
            datapoint,
            model,
            output_dir = "./output/predict/"):

        # outputs
        outputs = []
        
        # get prediction 
        prediction = model.predict(
            np.expand_dims(
                self.process(
                    datapoint,
                    image_only = True
                ),
                axis = 0 
            )
        )

        # squeeze prediction axis 0
        prediction = np.squeeze(prediction, axis = 0)

        
        # check if probability map should be created
        if self.config["deeplab"]["output"]["probability_map"] == True:

            image = self.read_image_or_mask(
                datapoint.image.path,
                resize_dims = (512,512)
            )

            probability_heatmap, _ = self.make_probability_heatmap(
                image,
                prediction
            )
            probability_heatmap = self.fig_to_ndarray(probability_heatmap)
            '''
            outputs.append(
                {
                    "path" : pathlib.Path(output_dir, f"{datapoint.id}.{datapoint.uuid}.probability_map.png").as_posix(),
                    "data" : probability_heatmap
                }
            )
            '''

        
        # apply a binary threshold to the prediction 
        prediction1 = self.threshold_prediction(prediction)
        '''
        outputs.append(
            {
                "path" : pathlib.Path(output_dir, f"{datapoint.id}.{datapoint.uuid}.prediction.png").as_posix(),
                "data" : prediction
            }
        )
        '''
        

        if self.config["deeplab"]["output"]["overlay"] == True:

            if image is None:
                image = self.read_image_or_mask(
                    datapoint.image.path,
                    resize_dims = (512,512)
                )

            color_prediction = self.grayscale_to_color(prediction1, {255:"#148ef6"})
            overlay = self.overlay(image, color_prediction)
            '''
            outputs.append(
                {
                    "path" : pathlib.Path(output_dir, f"{datapoint.id}.{datapoint.uuid}.overlay.png").as_posix(),
                    "data" : overlay
                }
            )
            '''

        # remove later - 3 - panel figure
        three_panel_fig = self.make_three_panel_fig(image, prediction, overlay, save_path=pathlib.Path(output_dir, f"{datapoint.id}.{datapoint.uuid}.threepanel.png").as_posix())


        '''
        # write output 
        for output in outputs:

            cv2.imwrite(
                output["path"],
                output["data"]
            )
        '''
        
                                

    
    def tensorflow_dataset_handler(self, datapoints: List[Datapoint]):
        # Convert each Pydantic object to a format TensorFlow can understand
        def generator():
            for data_point in datapoints:
                yield self.process(data_point)
            
        return generator

    
    def create_tf_dataset(self, dataset : np.ndarray, apply_augmentation = False):

        example = dataset[0]
        image_shape = example.image.shape
        mask_shape = example.mask.shape
        
        output_signature = (
            tf.TensorSpec(shape = image_shape, dtype = tf.float32),
            tf.TensorSpec(shape = mask_shape, dtype = tf.float32)
        )

        
        if apply_augmentation == True:
            
            return (
                tf.data.Dataset.from_generator(
                    self.tensorflow_dataset_handler(dataset),
                    output_signature = output_signature,
                )
                .cache()
                .map(Augment(), num_parallel_calls = tf.data.AUTOTUNE)
                .batch(self.config["training"]["batch_size"])
                .prefetch(buffer_size = tf.data.AUTOTUNE)
            )
        else:
            return (
                tf.data.Dataset.from_generator(
                    self.tensorflow_dataset_handler(dataset),
                    output_signature = output_signature,
                )
                .cache()
                .batch(self.config["training"]["batch_size"])
                .prefetch(buffer_size = tf.data.AUTOTUNE)
            )



    def get_ids_from_dataset(self, dataset_dict):
        id_dict = {}
        for dataset_name, dataset_items in dataset_dict.items():
            id_dict[dataset_name] = [x.id for x in dataset_items]
        return id_dict
            


